#!/usr/bin/env sh

in_array() {
  # USAGE: if in_array "VALUE" "${ARRAY[@]}"; then ...
  local value="$1"; shift
  for i in "$@"; do
    [ "${arrayItem}" == "${value}" ] && return 0
  done
  return 1
}

assert()
{
	if "$@"; then
		:
	else
		die "assertion failed: " "$@"
	fi
}

find_dist()
{
  if ! [ -r /etc/lsb-release ]
  then
    if [ -r /etc/arch-release ]
    then
      echo arch
      return
    fi
    err "unsuported distribution: $dist"
    return 1
  fi
  dist="$(lsb_release -i -s | tr A-Z a-z)"
  case "$dist" in
    arch)
      echo 'arch'
      ;;
    linuxmint|ubuntu)
      echo 'ubuntu'
      ;;
    *)
      err "unsuported distribution: $dist"
      return 1
      ;;
  esac
}
# Crude version of wheels_install, that will work
# if wheel is not installed and for installing it,
# but still tries to hit/update the wheels cache.
pip_install()
{
  run mkdir -p "$wheels" || return $?
  run "$python" -m pip install -d "$wheels" -f "$wheels" "$@" || true
  run "$python" -m pip install -f "$wheels" "$@"
}

wheels_install()
{
  run "$python" -m utils.install_wheels "$@"
}

# Crude version of https://github.com/jaraco/rwt
rwt() {
  (
  local rwt_args=()
  while [ $# -ne 0 ]
  do
    if [ "x$1" = 'x--' ]
    then
      shift
      break
    fi
    rwt_args+=("$1")
    shift
  done
  wheels_install -t "$PWD/.rwt" "${rwt_args[@]}"
  run export PYTHONPATH="$PWD/.rwt${PYTHONPATH:+:$PYTHONPATH}"
  "$@"
  run rm -rf .rwt
)
}

funny_dots() {
 I=0
 REPEATS=$1
 SLEEP=$2
# EXT_SHELL=`ps -p $$ -o comm=|awk '{n=split($1,tt,"/"); print tt[n];}'`
 if [ "$EXT_SHELL" == "bash" ]; then
  ECHONOLINE="echo -n -e  \0 ."
  ECHOLAST="echo -e \n"
 else
  ECHONOLINE="echo  \0 .\c"
  ECHOLAST="echo \n"
 fi
 sleep $SLEEP
 while [ $I -lt $REPEATS ]
  do
    $ECHONOLINE
    let "I+=1"
    sleep $SLEEP
  done
 $ECHOLAST
}

function assert_nb_args() {
  # Usage: assert_number_of_arguments EXPECTED_NUMBER
  # e.g. assert_numner_of_arguments 3
  # assert_numner_of_arguments 0
  # Credit: http://www.linuxweblog.com/bash-argument-numbers-check
  local EXPECTED_NUM_ARGS=$1
  if [ $NUM_ARGS -ne $EXPECTED_NUM_ARGS ]
  then
    if [ "$NUM_ARGS" -eq "1" ];
    then
      MSG="Expected 1 argument (got $NUM_ARGS)"
    else
      MSG="Expected $EXPECTED_NUM_ARGS arguments (got $NUM_ARGS)"
    fi
    printf "Usage: `basename $BASENAME`\n$MSG\n"
    exit $WRONG_NUMBER_OF_ARGUMENTS_ERROR
  fi
}
